# Задание 1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()), который
# должен принимать данные (список списков) для формирования матрицы.
# Следующий шаг - реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.

class Matrix:
    def __init__(self, n):
        self.matrix = [[int(el) for el in input('введите строку матрицы: ').split()] for i in range(n)]

    def __str__(self):
        for i in range (len(self.matrix)):
            for j in range (len(self.matrix[i])):
                print(self.matrix[i][j], end = ' ')
            print()

    def __add__(self, p):
        new_matrix = [[int(el) for el in input('введите строку новой матрицы: ').split()] for i in range(p)]
        out = [[0 for a in range(len(self.matrix[b]))] for b in range (len(self.matrix))]
        for i in range (len(self.matrix)):
            for j in range (len(self.matrix[i])):
                out[i][j] = self.matrix[i][j] + new_matrix[i][j]
        for o in range(len(out)):
            for el in range(len(out[o])):
                print(out[o][el], end=' ')
            print()



my_matrix = Matrix(int(input('введите количество строк матрицы: ')))
my_matrix.__str__()
my_matrix.__add__(int(input('введите количество строк новой матрицы: ')))



# Задание 2. Реализовать проект расчета суммарного расхода ткани на производство одежды. Основная сущность (класс)
# этого проекта - одежда, которая может иметь определенное название. К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). Это мб обычные числа: v и h соотв.
# Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (v/6.5+0.5), для костюма
# (2*h+0,3). Проверить работу этих методов на реальны данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания: реализовать абстрактные
# классы для основных классов проекта, проверить на практике работу декоратора @property.


class Clothes:

    def __init__(self, v, h):
        self.coat = v
        self.costume = h

    @property
    def coat(self):
        return self._coat

    @ coat.setter
    def coat (self, v):
        self._coat = v / 6.5 + 0.5

    @property
    def costume (self):
       return  self._costume

    @ costume.setter
    def costume(self, h):
        self._costume = 2 * h + 0.3

    def out (self):
        print (f'общий расход ткани на пальто и костюм: {round(self.coat + self.costume)} m.кв')

my_out = Clothes (int(input('введите размер пальто: ')), int(input('введите рост для костюма: ')))
my_out.out()

# Задание 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление
# (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# обычное (не целочисленное) деление клеток. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек дву клеток больше
# нуля,иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек двух.
# Деление. общая клетка из двух, число ячеек кторой - целочисленное деление количества ячеек двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный метод
# позволяет организовать ячейки по рядам. Метод должен возвращать строку вида ****\n****\n****..., где количество ячеек
# между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает,тов последний ряд записываются все
# оставшиеся. Напрмер, количество ячеек клетки равно 12, количество ячеек в ряду - 5. Тогда метод make_order() вернет
# строку: *****\n*****\n**.

class Cell:
    def __init__(self, cells):
        self.cell = cells

    def __add__(self, other):
        return self.cell + other

    def __sub__(self, other):
        if self.cell > other:
            self._cell = self.cell - other
        else:
            self._cell = 'разность ячеек меньше 0'
        return self._cell

    def __mul__(self, other):
        return self.cell * other

    def __truediv__(self, other):
        return round(self.cell / other)

    def make_order(self):
        n = int(input('введите количесво ячеек в ряду: '))
        list = int(self.cell / n)
        self.end = self.cell - list * n
        if self.end > 0:
            self.pos = list + 1
        else:
            self.pos = list

        out = []

        for i in range (0, self.pos):
            i += 1
            if (self.end > 0 and i < self.pos) or self.end == 0:
                for l in range (0, (n + 1)):
                    l += 1
                    if l < n + 1:
                        out.append('*')
                    elif l == n + 1:
                        out.append('\n')
            elif self.end > 0 and i == self.pos:
                for l in range (0, (self.end + 1)):
                    l += 1
                    if l < self.end + 1:
                        out.append('*')
                    else:
                        out.append('\n')
        out_str = str(out)
        print(out_str.replace(',', '').replace("'", '').replace('[', '').replace(']', ''))

my_cell = Cell(int(input('введите количество клеток: ')))
my_cell.make_order()










# В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление
# (__truediv__()).
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
